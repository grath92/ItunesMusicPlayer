package com.gopal.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.gopal.database.Favorites;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FAVORITES.
*/
public class FavoritesDao extends AbstractDao<Favorites, Long> {

    public static final String TABLENAME = "FAVORITES";

    /**
     * Properties of entity Favorites.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TrackId = new Property(1, long.class, "trackId", false, "TRACK_ID");
        public final static Property TotalTime = new Property(2, long.class, "totalTime", false, "TOTAL_TIME");
        public final static Property TrackName = new Property(3, String.class, "trackName", false, "TRACK_NAME");
        public final static Property ArtiestName = new Property(4, String.class, "artiestName", false, "ARTIEST_NAME");
        public final static Property TrackCensoredName = new Property(5, String.class, "trackCensoredName", false, "TRACK_CENSORED_NAME");
        public final static Property SongPicUrl = new Property(6, String.class, "songPicUrl", false, "SONG_PIC_URL");
        public final static Property SongPreviewUrl = new Property(7, String.class, "songPreviewUrl", false, "SONG_PREVIEW_URL");
    };


    public FavoritesDao(DaoConfig config) {
        super(config);
    }
    
    public FavoritesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FAVORITES' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TRACK_ID' INTEGER NOT NULL ," + // 1: trackId
                "'TOTAL_TIME' INTEGER NOT NULL ," + // 2: totalTime
                "'TRACK_NAME' TEXT NOT NULL ," + // 3: trackName
                "'ARTIEST_NAME' TEXT NOT NULL ," + // 4: artiestName
                "'TRACK_CENSORED_NAME' TEXT NOT NULL ," + // 5: trackCensoredName
                "'SONG_PIC_URL' TEXT NOT NULL ," + // 6: songPicUrl
                "'SONG_PREVIEW_URL' TEXT NOT NULL );"); // 7: songPreviewUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FAVORITES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Favorites entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTrackId());
        stmt.bindLong(3, entity.getTotalTime());
        stmt.bindString(4, entity.getTrackName());
        stmt.bindString(5, entity.getArtiestName());
        stmt.bindString(6, entity.getTrackCensoredName());
        stmt.bindString(7, entity.getSongPicUrl());
        stmt.bindString(8, entity.getSongPreviewUrl());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Favorites readEntity(Cursor cursor, int offset) {
        Favorites entity = new Favorites( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // trackId
            cursor.getLong(offset + 2), // totalTime
            cursor.getString(offset + 3), // trackName
            cursor.getString(offset + 4), // artiestName
            cursor.getString(offset + 5), // trackCensoredName
            cursor.getString(offset + 6), // songPicUrl
            cursor.getString(offset + 7) // songPreviewUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Favorites entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTrackId(cursor.getLong(offset + 1));
        entity.setTotalTime(cursor.getLong(offset + 2));
        entity.setTrackName(cursor.getString(offset + 3));
        entity.setArtiestName(cursor.getString(offset + 4));
        entity.setTrackCensoredName(cursor.getString(offset + 5));
        entity.setSongPicUrl(cursor.getString(offset + 6));
        entity.setSongPreviewUrl(cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Favorites entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Favorites entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
